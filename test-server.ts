#!/usr/bin/env node

import { TickTickMcpServer } from "./src/server/ticktick-mcp-server.js";
import { TickTickClientConfig } from "./src/types/ticktick.js";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function testServer() {
	console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TickTick MCP —Å–µ—Ä–≤–µ—Ä–∞...\n");

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	const accessToken = process.env.TICKTICK_ACCESS_TOKEN;

	if (!accessToken) {
		console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TICKTICK_ACCESS_TOKEN");
		console.error(
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'npm run get-token' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"
		);
		console.error("–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TICKTICK_ACCESS_TOKEN –≤ .env —Ñ–∞–π–ª–µ");
		process.exit(1);
	}

	console.log("‚úÖ Access token –Ω–∞–π–¥–µ–Ω");
	console.log(`   Token: ${accessToken.substring(0, 20)}...\n`);

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	const config: TickTickClientConfig = {
		baseUrl:
			process.env.TICKTICK_BASE_URL || "https://api.ticktick.com/open/v1",
		timeout: 10000,
	};

	try {
		// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
		console.log("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞...");
		const server = new TickTickMcpServer(config);

		console.log("‚úÖ –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
		console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:");
		console.log("   - get_projects: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤");
		console.log("   - get_project_tasks: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞");
		console.log("   - get_task: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID");
		console.log("   - create_task: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É");
		console.log("   - update_task: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É");
		console.log("   - complete_task: –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É");
		console.log("   - delete_task: –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É");
		console.log("   - create_project: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç");
		console.log("   - delete_project: –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç");

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
		console.log("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤...");

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		const { TickTickClient } = await import("./src/client/ticktick-client.js");
		const client = new TickTickClient(config);

		try {
			// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
			console.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...");
			const projects = await client.getProjects(accessToken);
			console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤:`);
			projects.slice(0, 3).forEach((project, index) => {
				console.log(`   ${index + 1}. ${project.name} (ID: ${project.id})`);
			});
			if (projects.length > 3) {
				console.log(`   ... –∏ –µ—â–µ ${projects.length - 3} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
			}

			// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
			if (projects.length > 0) {
				const firstProject = projects[0];
				console.log(`\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ "${firstProject.name}"...`);

				try {
					const projectData = await client.getProjectWithData(
						firstProject.id,
						accessToken
					);
					const tasks = projectData.tasks || [];
					console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á:`);

					tasks.slice(0, 5).forEach((task, index) => {
						const status = task.status === 0 ? "üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è" : "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞";
						const priority = task.priority ? `[P${task.priority}]` : "";
						console.log(`   ${index + 1}. ${status} ${priority} ${task.title}`);
					});

					if (tasks.length > 5) {
						console.log(`   ... –∏ –µ—â–µ ${tasks.length - 5} –∑–∞–¥–∞—á`);
					}

					if (tasks.length === 0) {
						console.log("   üì≠ –ü—Ä–æ–µ–∫—Ç –ø—É—Å—Ç");
					}
				} catch (taskError) {
					console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏: ${taskError}`);
				}
			}
		} catch (apiError) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:", apiError);
			console.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
			console.error("- –ò—Å—Ç–µ–∫ access token (–∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run get-token)");
			console.error("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é");
			console.error("- –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API");
		}

		console.log("\nüîß –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:");
		console.log("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start");
		console.log(
			"2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ Claude Desktop –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ claude-desktop-config.json"
		);

		console.log("\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:");
		console.log(
			"- –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä accessToken"
		);
		console.log(
			"- –ï—Å–ª–∏ accessToken –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ TICKTICK_ACCESS_TOKEN"
		);
		console.log("- –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run get-token");

		console.log("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:", error);
		process.exit(1);
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testServer().catch((error) => {
	console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:", error);
	process.exit(1);
});
