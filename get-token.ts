#!/usr/bin/env node

import express from "express";
import { spawn } from "child_process";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const PORT = 8080;
const REDIRECT_URI = `http://localhost:${PORT}/callback`;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è TickTick –∏–ª–∏ Dida365
const config = {
	baseUrl: process.env.TICKTICK_BASE_URL || "https://api.ticktick.com/open/v1",
	authUrl:
		process.env.TICKTICK_AUTH_URL || "https://ticktick.com/oauth/authorize",
	tokenUrl:
		process.env.TICKTICK_TOKEN_URL || "https://ticktick.com/oauth/token",
	clientId: process.env.TICKTICK_CLIENT_ID,
	clientSecret: process.env.TICKTICK_CLIENT_SECRET,
};

async function getToken() {
	console.log("üéØ TickTick Access Token Generator");
	console.log("==================================\n");

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CLIENT_ID –∏ CLIENT_SECRET
	if (!config.clientId || !config.clientSecret) {
		console.error(
			"‚ùå –û—à–∏–±–∫–∞: CLIENT_ID –∏ CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ"
		);
		console.log("\nüìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:");
		console.log("TICKTICK_CLIENT_ID=your_client_id_here");
		console.log("TICKTICK_CLIENT_SECRET=your_client_secret_here");
		console.log(
			"\nüîó –ü–æ–ª—É—á–∏—Ç—å credentials: https://developer.ticktick.com/manage"
		);
		process.exit(1);
	}

	const app = express();
	let server: any;

	// –°–æ–∑–¥–∞–µ–º Promise –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	const getAuthCode = (): Promise<string> => {
		return new Promise((resolve, reject) => {
			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞
			app.get("/callback", (req, res) => {
				const { code, error } = req.query;

				if (error) {
					res.send(`
            <html>
              <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
                <h2 style="color: red;">‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
                <p>–û—à–∏–±–∫–∞: ${error}</p>
                <p>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.</p>
              </body>
            </html>
          `);
					reject(new Error(`Authorization error: ${error}`));
					return;
				}

				if (!code) {
					res.send(`
            <html>
              <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
                <h2 style="color: red;">‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω</h2>
                <p>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.</p>
              </body>
            </html>
          `);
					reject(new Error("No authorization code received"));
					return;
				}

				res.send(`
          <html>
            <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
              <h2 style="color: green;">‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>
              <p>–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω. –û–±–º–µ–Ω–∏–≤–∞–µ–º –Ω–∞ access token...</p>
              <p>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.</p>
            </body>
          </html>
        `);

				resolve(code as string);
			});

			// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
			server = app.listen(PORT, () => {
				console.log(`üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

				// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
				const authUrl = new URL(config.authUrl);
				authUrl.searchParams.set("client_id", config.clientId!);
				authUrl.searchParams.set("scope", "tasks:read tasks:write");
				authUrl.searchParams.set("response_type", "code");
				authUrl.searchParams.set("redirect_uri", REDIRECT_URI);
				authUrl.searchParams.set("state", "ticktick-mcp");

				console.log("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
				console.log(`üìã URL: ${authUrl.toString()}\n`);

				// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
				const platform = process.platform;
				let command: string;

				if (platform === "darwin") {
					command = "open";
				} else if (platform === "win32") {
					command = "start";
				} else {
					command = "xdg-open";
				}

				spawn(command, [authUrl.toString()], {
					detached: true,
					stdio: "ignore",
				});

				console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
			});

			// –¢–∞–π–º–∞—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
			setTimeout(() => {
				reject(new Error("Authorization timeout (5 minutes)"));
			}, 5 * 60 * 1000);
		});
	};

	try {
		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		const authCode = await getAuthCode();
		console.log("‚úÖ –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω");

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
		server.close();

		// –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ access token
		console.log("üîÑ –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ access token...");

		const tokenResponse = await fetch(config.tokenUrl, {
			method: "POST",
			headers: {
				"Content-Type": "application/x-www-form-urlencoded",
				Authorization: `Basic ${Buffer.from(
					`${config.clientId}:${config.clientSecret}`
				).toString("base64")}`,
			},
			body: new URLSearchParams({
				grant_type: "authorization_code",
				code: authCode,
				redirect_uri: REDIRECT_URI,
				scope: "tasks:read tasks:write",
			}),
		});

		if (!tokenResponse.ok) {
			const errorText = await tokenResponse.text();
			throw new Error(
				`Token exchange failed: ${tokenResponse.status} ${errorText}`
			);
		}

		const tokenData = await tokenResponse.json();

		if (!tokenData.access_token) {
			throw new Error("No access token in response");
		}

		console.log("‚úÖ Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n");

		// –í—ã–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω
		console.log("üéâ –í–ê–® ACCESS TOKEN:");
		console.log("===================");
		console.log(tokenData.access_token);
		console.log("===================\n");

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
		const envPath = path.join(process.cwd(), ".env");
		let envContent = "";

		if (fs.existsSync(envPath)) {
			envContent = fs.readFileSync(envPath, "utf8");
		}

		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
		envContent = envContent.replace(/^TICKTICK_ACCESS_TOKEN=.*$/m, "");

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
		if (envContent && !envContent.endsWith("\n")) {
			envContent += "\n";
		}
		envContent += `TICKTICK_ACCESS_TOKEN=${tokenData.access_token}\n`;

		fs.writeFileSync(envPath, envContent);
		console.log("‚úÖ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª");

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
		if (tokenData.expires_in) {
			const expiresAt = new Date(Date.now() + tokenData.expires_in * 1000);
			console.log(`‚è∞ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${expiresAt.toLocaleString()}`);
		}

		if (tokenData.refresh_token) {
			console.log("üîÑ Refresh token —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–µ–Ω");
		}

		console.log("\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä:");
		console.log("npm test  # –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
		console.log("npm start # –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
		process.exit(0);
	} catch (error) {
		console.error(
			"\n‚ùå –û—à–∏–±–∫–∞:",
			error instanceof Error ? error.message : error
		);

		if (server) {
			server.close();
		}

		process.exit(1);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on("SIGINT", () => {
	console.log("\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
	process.exit(0);
});

process.on("SIGTERM", () => {
	console.log("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã");
	process.exit(0);
});

getToken();
